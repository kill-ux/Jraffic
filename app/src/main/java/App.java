/*
 * This source file was generated by the Gradle 'init' task
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.stage.Stage;
import shape.Car;

/**
 * <img src=
 * "https://zone01oujda.ma/_next/image?url=%2Flogolight.png&w=640&q=75">
 *
 * @see Platform
 *
 * @since JavaFX 2.0
 */
// import javafx.stage.Stage;
// import javafx.util.Duration;

public class App extends Application {

    private long currentTime;
    private static final double WINDOW_WIDTH = 800;
    private static final double WINDOW_HEIGHT = 800;
    private static final double BALL_RADIUS = 20;
    private static final double SPEED = 0.1;
    private static final double CAR_WIDTH = 40;
    private static final double SAFETY_GAP = 10;
    private List<Car> cars = new ArrayList<>();
    private Map<KeyCode, Integer> lengthCars = new HashMap<>();
    private Map<KeyCode, Car> lastCarXandY = new HashMap<>();

    @Override
    public void start(Stage stage) throws Exception {

        Point2D North = new Point2D(400, 0);
        Point2D South = new Point2D(400, 800);
        Point2D East = new Point2D(800, 400);
        Point2D West = new Point2D(0, 400);

        Map<KeyCode, Point2D> positions = Map.of(
                KeyCode.UP, new Point2D(South.getX(), South.getY()),
                KeyCode.DOWN, new Point2D(North.getX() - 40, North.getY() - 40),
                KeyCode.LEFT, new Point2D(East.getX(), East.getY() - 40),
                KeyCode.RIGHT, new Point2D(West.getX() - 40, West.getY()));

        Line[] lines = new Line[] {
                new Line(West.getX(), West.getY(), East.getX(), East.getY()),
                new Line(West.getX(), West.getY() - CAR_WIDTH, East.getX(), East.getY() - CAR_WIDTH),
                new Line(West.getX(), West.getY() + CAR_WIDTH, East.getX(), East.getY() + CAR_WIDTH),
                new Line(North.getX(), North.getY(), South.getX(), South.getY()),
                new Line(North.getX() + CAR_WIDTH, North.getY(), South.getX() + CAR_WIDTH, South.getY()),
                new Line(North.getX() - CAR_WIDTH, North.getY(), South.getX() - CAR_WIDTH, South.getY()),
        };

        Pane pane = new Pane();

        for (Line line : lines) {
            line.setStroke(Color.GRAY);
        }
        pane.getChildren().addAll(lines);

        Circle ball = new Circle(BALL_RADIUS, Color.RED);
        ball.setCenterX(WINDOW_WIDTH / 2);
        ball.setCenterY(WINDOW_HEIGHT / 2);
        pane.getChildren().add(ball);

        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
    
                double speed = 0.1;

                Iterator<Car> iterator = cars.iterator();
                while (iterator.hasNext()) {
                    Car car = iterator.next();
                    // change direction



                    // 
                    switch (car.direction) {
                        case UP -> car.setY(car.getY() - speed);
                        case DOWN -> car.setY(car.getY() + speed);
                        case LEFT -> car.setX(car.getX() - speed);
                        case RIGHT -> car.setX(car.getX() + speed);
                        default -> {
                        }
                    }

                    if (car.getX() > WINDOW_WIDTH || car.getY() > WINDOW_HEIGHT || car.getX() < -41
                            || car.getY() < -41) {
                        iterator.remove();
                        pane.getChildren().remove(car);
                        lengthCars.put(car.direction, lengthCars.get(car.direction) - 1);
                    }
                }

            }
        };

        stage.centerOnScreen();
        Scene scene = new Scene(pane, WINDOW_WIDTH, WINDOW_HEIGHT);
        scene.setFill(Color.BLACK);

        // keys
        scene.addEventFilter(KeyEvent.KEY_PRESSED, event -> {
            KeyCode key = event.getCode();
            switch (key) {
                case UP, DOWN, LEFT, RIGHT -> {
                    // capacity = floor(lane_length / (vehicle_length + safety_gap))
                    double capacity = Math.floor(WINDOW_WIDTH / (CAR_WIDTH + SAFETY_GAP));
                    if (lengthCars.getOrDefault(key, 0) < capacity) {
                        Point2D pos = positions.get(key);
                        Car lastCar = lastCarXandY.get(key);
                        if (lastCar == null
                                || lastCar.distance(pos.getX(), pos.getY()) >= SAFETY_GAP + lastCar.getWidth()) {
                            Car car = new Car(randomColor(), key);
                            car.setX(pos.getX());
                            car.setY(pos.getY());
                            pane.getChildren().add(car);
                            lengthCars.put(key, lengthCars.getOrDefault(key, 0) + 1);
                            lastCarXandY.put(key, car);
                            cars.add(car);
                            System.out.println(cars.size() + " => " + lengthCars.get(key));
                        }

                    }
                }
                // case UP -> {
                // Car car = new Car(Color.YELLOW, event.getCode());
                // car.setX(South.getX());
                // car.setY(South.getY());
                // pane.getChildren().add(car);
                // cars.add(car);
                // }
                // case DOWN -> {
                // Car car = new Car(Color.YELLOW, event.getCode());
                // car.setX(North.getX() - 40);
                // car.setY(North.getY() - 40);
                // pane.getChildren().add(car);
                // cars.add(car);
                // }
                // case LEFT -> {
                // Car car = new Car(Color.YELLOW, event.getCode());
                // car.setX(East.getX());
                // car.setY(East.getY() - 40);
                // pane.getChildren().add(car);
                // cars.add(car);
                // }
                // case RIGHT -> {
                // Car car = new Car(Color.YELLOW, event.getCode());
                // car.setX(West.getX() - 40 );
                // car.setY(West.getY());
                // pane.getChildren().add(car);
                // cars.add(car);
                // }
                case R -> {

                }
                case ESCAPE -> {
                }
                default -> {
                }
            }
        });

        //
        stage.setTitle("Bouncing Ball Animation");
        stage.setScene(scene);
        // stage.setResizable(false);
        stage.show();

        timer.start();
    }

    public Color randomColor() {
        return new Color[] {
                Color.YELLOW,
                Color.PURPLE,
                Color.BLUE,
        }[ThreadLocalRandom.current().nextInt(3)];
    }

    public static void main(String[] args) {
        System.out.println("Hello world");
        launch();
    }

}